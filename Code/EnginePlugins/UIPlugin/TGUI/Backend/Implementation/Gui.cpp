/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// TGUI - Texus' Graphical User Interface
// Copyright (C) 2012-2020 Bruno Van de Velde (vdv_b@tgui.eu)
//
// This software is provided 'as-is', without any express or implied warranty.
// In no event will the authors be held liable for any damages arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it freely,
// subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented;
//    you must not claim that you wrote the original software.
//    If you use this software in a product, an acknowledgment
//    in the product documentation would be appreciated but is not required.
//
// 2. Altered source versions must be plainly marked as such,
//    and must not be misrepresented as being the original software.
//
// 3. This notice may not be removed or altered from any source distribution.
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <UIPlugin/TGUI/Backend.hpp>
#include <UIPlugin/TGUI/Backend/Gui.hpp>
#include <UIPlugin/TGUI/Timer.hpp>
#include <UIPlugin/TGUI/ToolTip.hpp>

#include <UIPlugin/TGUI/Backend/Backend.hpp>
#include <UIPlugin/TGUI/Backend/BackendRenderTarget.hpp>

#include <UIPlugin/TGUI/Event.hpp>

#include <thread>

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace tgui
{
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  Gui::Gui()
  {
    init();
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  Gui::Gui(ezWindowBase* window)
  {
    init();
    setWindow(window);
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  void Gui::setWindow(ezWindowBase* window)
  {
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  bool Gui::handleEvent(const ezInputManager::InputEventData& eventData)
  {
    Event event;
    event.type = Event::Type::MouseButtonPressed;
    event.mouseButton = {Event::MouseButton::Left, 0, 0};

    return handleEvent(event);
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  void Gui::draw()
  {
  }

  void Gui::init()
  {
    if (!isBackendSet())
    {
      setBackend(std::make_shared<Backend>());
      getBackend()->setDestroyOnLastGuiDetatch(true);
    }

    GuiBase::init();
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  void Gui::updateContainerSize()
  {
    GuiBase::updateContainerSize();
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
} // namespace tgui

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
