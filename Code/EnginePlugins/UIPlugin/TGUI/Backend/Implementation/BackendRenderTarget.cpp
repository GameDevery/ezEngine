/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// TGUI - Texus' Graphical User Interface
// Copyright (C) 2012-2020 Bruno Van de Velde (vdv_b@tgui.eu)
//
// This software is provided 'as-is', without any express or implied warranty.
// In no event will the authors be held liable for any damages arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it freely,
// subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented;
//    you must not claim that you wrote the original software.
//    If you use this software in a product, an acknowledgment
//    in the product documentation would be appreciated but is not required.
//
// 2. Altered source versions must be plainly marked as such,
//    and must not be misrepresented as being the original software.
//
// 3. This notice may not be removed or altered from any source distribution.
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


#include <UIPlugin/TGUI/Backend/BackendRenderTarget.hpp>
#include <UIPlugin/TGUI/Backend/BackendText.hpp>
#include <UIPlugin/TGUI/Backend/BackendTexture.hpp>
#include <UIPlugin/TGUI/Backend/Backend.hpp>
#include <UIPlugin/TGUI/Container.hpp>


#include <algorithm>
#include <numeric>
#include <vector>
#include <cmath>

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace tgui
{
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BackendRenderTarget::BackendRenderTarget(ezWindowBase* window)
    {
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    BackendRenderTarget::~BackendRenderTarget()
    {
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ezWindowBase* BackendRenderTarget::getWindow() const
    {
        return nullptr;
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    void BackendRenderTarget::setView(FloatRect view, FloatRect viewport)
    {
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    void BackendRenderTarget::drawGui(const std::shared_ptr<RootContainer>& root)
    {

    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    void BackendRenderTarget::drawWidget(const RenderStates& states, const std::shared_ptr<Widget>& widget)
    {
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    void BackendRenderTarget::addClippingLayer(const RenderStates& states, FloatRect rect)
    {

    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    void BackendRenderTarget::removeClippingLayer()
    {
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    void BackendRenderTarget::drawSprite(const RenderStates& states, const Sprite& sprite)
    {
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    void BackendRenderTarget::drawText(const RenderStates& states, const Text& text)
    {
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    void BackendRenderTarget::drawTriangles(const RenderStates& states, const Vertex* vertices, std::size_t vertexCount, const int* indices, std::size_t indexCount)
    {
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    void BackendRenderTarget::drawCircle(const RenderStates& states, float size, const Color& backgroundColor, float borderThickness, const Color& borderColor)
    {

    }
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
