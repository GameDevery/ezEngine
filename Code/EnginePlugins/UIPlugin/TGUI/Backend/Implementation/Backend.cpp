/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// TGUI - Texus' Graphical User Interface
// Copyright (C) 2012-2020 Bruno Van de Velde (vdv_b@tgui.eu)
//
// This software is provided 'as-is', without any express or implied warranty.
// In no event will the authors be held liable for any damages arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it freely,
// subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented;
//    you must not claim that you wrote the original software.
//    If you use this software in a product, an acknowledgment
//    in the product documentation would be appreciated but is not required.
//
// 2. Altered source versions must be plainly marked as such,
//    and must not be misrepresented as being the original software.
//
// 3. This notice may not be removed or altered from any source distribution.
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


#include <UIPlugin/TGUI/Backend/Backend.hpp>
#include <UIPlugin/TGUI/Backend/BackendFont.hpp>
#include <UIPlugin/TGUI/Backend/BackendText.hpp>
#include <UIPlugin/TGUI/Backend/BackendTexture.hpp>
#include <UIPlugin/TGUI/Backend/BackendRenderTarget.hpp>
#include <UIPlugin/TGUI/Backend/Gui.hpp>
#include <UIPlugin/TGUI/DefaultFont.hpp>
#include <UIPlugin/TGUI/Timer.hpp>


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace tgui
{
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    Backend::Backend()
    {
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    Backend::~Backend()
    {
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    void Backend::attachGui(GuiBase* gui)
    {
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    void Backend::detatchGui(GuiBase* gui)
    {
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    Font Backend::createDefaultFont()
    {
        auto font = std::make_shared<BackendFont>();
        font->loadFromMemory(defaultFontBytes, sizeof(defaultFontBytes));
        return Font(font, "");
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    std::shared_ptr<BackendFontBase> Backend::createFont()
    {
        return std::make_shared<BackendFont>();
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    std::shared_ptr<BackendTextBase> Backend::createText()
    {
        return std::make_shared<BackendText>();
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    std::shared_ptr<BackendTextureBase> Backend::createTexture()
    {
        return std::make_shared<BackendTexture>();
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    void Backend::setMouseCursorStyle(Cursor::Type type, const std::uint8_t* pixels, Vector2u size, Vector2u hotspot)
    {
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    void Backend::resetMouseCursorStyle(Cursor::Type type)
    {
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    void Backend::setMouseCursor(GuiBase* gui, Cursor::Type type)
    {
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    void Backend::openVirtualKeyboard(const FloatRect&)
    {
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    void Backend::closeVirtualKeyboard()
    {
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    bool Backend::isKeyboardModifierPressed(Event::KeyModifier modifierKey)
    {
        return false;
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    void Backend::setClipboard(const String& contents)
    {
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    String Backend::getClipboard() const
    {
            return "";
    }
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
