/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// TGUI - Texus' Graphical User Interface
// Copyright (C) 2012-2020 Bruno Van de Velde (vdv_b@tgui.eu)
//
// This software is provided 'as-is', without any express or implied warranty.
// In no event will the authors be held liable for any damages arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it freely,
// subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented;
//    you must not claim that you wrote the original software.
//    If you use this software in a product, an acknowledgment
//    in the product documentation would be appreciated but is not required.
//
// 2. Altered source versions must be plainly marked as such,
//    and must not be misrepresented as being the original software.
//
// 3. This notice may not be removed or altered from any source distribution.
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


#include <UIPlugin/TGUI/Backend/Backend.hpp>
#include <UIPlugin/TGUI/Backend/BackendTexture.hpp>

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace tgui
{
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  BackendTexture::~BackendTexture()
  {
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  bool BackendTexture::loadFromFile(const String& filename)
  {
    return true;
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  bool BackendTexture::loadFromPixelData(Vector2u size, const std::uint8_t* pixels)
  {
    return true;
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  Vector2u BackendTexture::getSize() const
  {
    return {0, 0};
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  void BackendTexture::setSmooth(bool)
  {
    // The SDL backend currently doesn't support changing the smooth flag

    // One of the following lines can be used to set the interpolation on textures, but it only affects new textures and
    // it affects all textures that are created afterwards so it might affect user code.
    // SDL_SetHint(SDL_HINT_RENDER_SCALE_QUALITY, "nearest");
    // SDL_SetHint(SDL_HINT_RENDER_SCALE_QUALITY, "linear");
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  bool BackendTexture::isSmooth() const
  {
    // The SDL backend doesn't support querying the smooth flag
    return false;
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  bool BackendTexture::isTransparentPixel(Vector2u pixel) const
  {
    return true;
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
} // namespace tgui

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
