#pragma once

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// TGUI - Texus' Graphical User Interface
// Copyright (C) 2012-2020 Bruno Van de Velde (vdv_b@tgui.eu)
//
// This software is provided 'as-is', without any express or implied warranty.
// In no event will the authors be held liable for any damages arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it freely,
// subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented;
//    you must not claim that you wrote the original software.
//    If you use this software in a product, an acknowledgment
//    in the product documentation would be appreciated but is not required.
//
// 2. Altered source versions must be plainly marked as such,
//    and must not be misrepresented as being the original software.
//
// 3. This notice may not be removed or altered from any source distribution.
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#include <UIPlugin/TGUI/GuiBase.hpp>
#include <Core/Input/InputManager.h>
#include <UIPlugin/TGUI/Event.hpp>
#include <UIPlugin/UIPluginDLL.h>
#include <RendererCore/Pipeline/View.h>

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace tgui
{
  class BackendRenderTarget;

  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// @brief Gui class for the ezEngine backend
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  class EZ_UIPLUGIN_DLL Gui : public GuiBase
  {
  public:
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief Default constructor
    ///
    /// @warning If you use this constructor then you will still have to call setWindow before using the gui.
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    Gui();


    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief Constructs the gui and set the window on which the gui should be drawn
    ///
    /// @param window  The window that will be used by the gui
    ///
    /// If you use this constructor then you will no longer have to call setWindow yourself.
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    Gui(ezView* view);


    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief Sets the window on which the gui should be drawn
    ///
    /// @param window  The window that will be used by the gui
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    void setView(ezView* view);

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief Passes the event to the widgets
    ///
    /// @param event  The event that was polled from the window
    ///
    /// @return Has the event been consumed?
    ///         When this function returns false, then the event was ignored by all widgets.
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    bool handleEvent(const ezInputManager::InputEventData& eventData);
    using GuiBase::handleEvent;


    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief Draws all the widgets that were added to the gui
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    void draw() override;



    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  protected:
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Function that is called when constructing the Gui
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    void init() override;


    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Updates the view and changes the size of the root container when needed
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    void updateContainerSize() override;


    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  protected:
    std::shared_ptr<BackendRenderTarget> m_renderTarget = nullptr;


    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  };
} // namespace tgui
