#pragma once


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// TGUI - Texus' Graphical User Interface
// Copyright (C) 2012-2020 Bruno Van de Velde (vdv_b@tgui.eu)
//
// This software is provided 'as-is', without any express or implied warranty.
// In no event will the authors be held liable for any damages arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it freely,
// subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented;
//    you must not claim that you wrote the original software.
//    If you use this software in a product, an acknowledgment
//    in the product documentation would be appreciated but is not required.
//
// 2. Altered source versions must be plainly marked as such,
//    and must not be misrepresented as being the original software.
//
// 3. This notice may not be removed or altered from any source distribution.
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


#include <Core/Input/InputManager.h>
#include <Foundation/Communication/Event.h>
#include <RendererCore/Pipeline/View.h>
#include <TGUIPlugin/TGUI/Backend.hpp>
#include <TGUIPlugin/TGUI/Event.hpp>
#include <TGUIPlugin/TGUIPluginDLL.h>
#include <map>
#include <vector>

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace tgui
{
  class Gui;
  class BackendRenderTarget;


  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// @brief Backend that uses ezEngine
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  class EZ_TGUIPLUGIN_DLL Backend : public BackendBase
  {
  public:
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief Default constructor
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    Backend();


    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief Destructor
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ~Backend();


    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief Informs the backend that a new gui object has been created.
    /// @param gui  Newly created gui
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    void attachGui(GuiBase* gui) override;


    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief Informs the backend that a gui object is being destroyed.
    /// @param gui  Gui object that is about to be deconstructed
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    void detatchGui(GuiBase* gui) override;


    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief Creates and returns the default font for all widgets
    /// @return Default font
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    Font createDefaultFont() override;


    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief Creates a new font object
    /// @return Font that is specific to the backend
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    std::shared_ptr<BackendFontBase> createFont() override;


    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief Creates a new text object
    /// @return Text that is specific to the backend
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    std::shared_ptr<BackendTextBase> createText() override;


    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief Creates a new texture object
    /// @return Texture that is specific to the backend
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    std::shared_ptr<BackendTextureBase> createTexture() override;


    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief Changes the look of a certain mouse cursor by using a bitmap
    ///
    /// @param type    Cursor that should make use of the bitmap
    /// @param pixels  Pointer to an array with 4*size.x*size.y elements, representing the pixels in 32-bit RGBA format
    /// @param size    Size of the cursor
    /// @param hotspot Pixel coordinate within the cursor image which will be located exactly at the mouse pointer position
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    void setMouseCursorStyle(Cursor::Type type, const std::uint8_t* pixels, Vector2u size, Vector2u hotspot) override;


    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief Changes the look of a certain mouse cursor back to the system theme
    ///
    /// @param type  Cursor that should no longer use a custom bitmap
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    void resetMouseCursorStyle(Cursor::Type type) override;


    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief Changes the mouse cursor when the mouse is on top of the window to which the gui is attached
    ///
    /// @param gui   The gui that represents the window for which the mouse cursor should be changed
    /// @param type  Which cursor to use
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    void setMouseCursor(GuiBase* gui, Cursor::Type type) override;


    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief Opens the virtual keyboard on Android and iOS
    /// @param inputRect Part of the screen where the text input is located
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    void openVirtualKeyboard(const FloatRect& inputRect) override;


    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief Closes the virtual keyboard on Android and iOS
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    void closeVirtualKeyboard() override;


    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief Checks the state for one of the modifier keys
    ///
    /// @param modifierKey  The modifier key of which the state is being queried
    ///
    /// @return Whether queries modifier key is being pressed
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    bool isKeyboardModifierPressed(Event::KeyModifier modifierKey) override;


    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief Changes the contents of the clipboard
    ///
    /// @param contents  New contents of the clipboard
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    void setClipboard(const String& contents) override;


    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief Returns the contents of the clipboard
    ///
    /// @return Clipboard contents
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    String getClipboard() const override;

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief Sets the ezWindowOutputTargetBase to which the gui will render and returns a new render target object to interact with
    ///
    /// @param gui     The gui for which the render target should be created
    /// @param ezWindowOutputTargetBase to draw on
    ///
    /// @return Render target that abstracts the drawing code
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    std::shared_ptr<BackendRenderTarget> createGuiRenderTarget(Gui* gui, ezView* view);

  protected:
    struct GuiResources
    {
      ezView* view = nullptr;
      Cursor::Type mouseCursor = Cursor::Type::Arrow;
    };

    std::map<GuiBase*, GuiResources> m_guis;
  };

  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
} // namespace tgui

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
